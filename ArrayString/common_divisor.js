/**
 * This is a GCD question
 * 
 * Approach:
 *    1. Use recursion
 *    2. If length of str2 is more than str1, recur with gcd(str2, str1)
 *    3. If str1 doesn't start with str2, then return an empty string
 *    4. If the longer string begins with a shorter string, cut off the common 
 *      prefix part and repeat until one is empty
 *    5. The string returned after the above steps are the gcd of the given array of string
 */




/**
 * @param {string} str1
 * @param {string} str2
 * @return {string}
 */
function gcdOfStrings(str1, str2) {
  // First, we ensure str1 is longer than str2
  if (str2.length > str1.length) {
    return gcdOfStrings(str2, str1);
  }

  // if st1 is not start with str2, return ""
  if (!(str1.startsWith(str2))) {
    return '';
  }

  if (str2.length === 0) {
    return str1;
  }

  return gcdOfStrings(str1.substring(str2.length), str2);
};


/**
 * The following is test
 * generated by AI
 */
function testGCDStringFunction() {

  // Test cases
  const testCases = [
    {
      str1: "ABCABC",
      str2: "ABC",
      expected: "ABC"
    },
    {
      str1: "ABABAB",
      str2: "ABAB",
      expected: "AB"
    },
    {
      str1: "LEET",
      str2: "CODE",
      expected: ""
    }
  ];

  // Run tests
  testCases.forEach(({ str1, str2, expected }, index) => {
    const result = gcdOfStrings(str1, str2);
    console.log(`Test Case ${index + 1}:`, result === expected ? "Passed" : `Failed (Expected: ${expected}, Got: ${result})`);
  });
}

// Run the test function
testGCDStringFunction();